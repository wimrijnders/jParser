#######################################################################
# $Id: ebnf.ebnf 42 2008-11-03 15:41:51Z wri $ 
#
# For reserved words and characters till now, view the language definition.
#
#######################################################################
# Precedence, highest to lowest:
#    ( )   - overrides all
#    [],{}
#    '|'   - left to right
#######################################################################

#TEST: using language file ebnfdef.ebnf.

language EBNFruby {

noWS

ignore SetError      = "Err" [+\-].
token  modifier_WS   =  "skipWS" | "noWS".
       SetCase       = "matchCase" [+\-].
skip   switches      = SetError | modifier_WS | SetCase.
       o_comment     = Err+ "#" { [\all~\r\n] } [\r\n].
       c_comment     = Err- "//" { [\all~\r\n] } [\r\n].
token  comment       = o_comment | c_comment.
ignore WS            = { comment | [ \t\n\r] }.

//Character definitions
overridechar  = [\)\-\~\\\]].               
# except clause on statement level not handled yet.
# except part in following range is actually overridechar
# ORIGINAL:
# token any     = [\all]~overridechar.
token any     = [\all~\)\-\~\\\]].               
dec           = [0123456789].
ExtChar       = [rnt] | overridechar | (dec dec dec) .
anychar       = any | ( "\\" ExtChar). 

# Definitions EBNF extensions 
csallchars    = "\\all".
token range       = csallchars | ( anychar  ( "-"  anychar )?  ).

except_charset= '~' range+.
charset       = noWS '[' {  range+ | except_charset }  ']'.

# Regexp - are copied straight to ruby, so the
#          ruby syntax should be valid.
re_char       = [\all~/] | "\\/". 
re_range      = re_char+.
token regexp  = noWS "/" re_range   "/".
# End Regexp
                            

litchar       = [\all~'"\r\n\\] 
                | ( '\\' ['"\\trn] ).     

token LiteralBlock  = litchar+.      

# literal_symbol-s are meant for the string which are part of the grammar.
# They usually don't show up in the final parse result.
# The exception (till now) is the parser itself - it should be able to handle
# the literal_symbol-s.
#
# Under normal circumstances, following should have line modifier 'ignore'.
token literal_symbol = '\'' LiteralBlock '\''.

# Literals are strings which contain information relevant to output, such as
# parts of labels.
token literal        = '\"' LiteralBlock '\"'.

token label   = [_a-zA-Z] [_a-zA-Z0-9]*.

skipWS

//Basic EBNF stuff
skip basicstatement = charset | regexp | literal| literal_symbol | label.
group          = statements.
repeat         = statements.

token postfix     = [+*?].

ExceptStatement= statement.
statement      = 
		( '{' repeat '}' ) |
		(
			( basicstatement  | ( '(' group ')' ) ) 
			noWS ( postfix | ('~' skipWS ExceptStatement) )?
		).

alternative   = statement  ( '|'  statement)*.
statements       = (switches* alternative)+.

rule_modifier  = 'entry' | 'ignore' | 'token' | 'skip'.
rule           = rule_modifier? label Err- '=' Err+ statements '.' .

#
#The actual language definition
#

skip languageblock  = 'language' label '{' 
		{ switches | rule } 
	'}'. 

usingfile      = noWS [a-zA-Z0-9_]+ ( [.] { [a-zA-Z0-9_] } )?.
languagefile   = Err- "using"  "language" "file" usingfile ".".
includefile    = "using"  "include" "file" usingfile ".".

#Entry point
entry language = {languagefile|includefile}  languageblock {languagefile}.

#
# End Language Definition.
#

}

#Following doesn't work any more!!!
#using language file insertmain.txt.



