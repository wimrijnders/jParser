/**
 * $Id: EBNFValidator.java 42 2008-11-03 15:41:51Z wri $
 *
 */
package nl.axizo.EBNF;

import nl.axizo.parser.*;
import java.util.Vector;
import java.util.Map;
import java.util.Hashtable;


/**
 * Perform validations on the parse tree, as generated by the
 * EBNF parser.
 *
 * Validations specific for ruby are added to this class.
 *
 */
public class EBNFValidatorRuby extends EBNFValidator {

	public void validate( State state ) throws ParseException {
		Util.info("Validating for ruby...");

		//
		// Do  ruby-specific validations
		// 
		Node root = state.getCurNode();
		checkAllExceptRange(root);

		// No state block
		if ( !root.get( "language").get( "stateblock" ).isNull() ) {
			addError( "stateblock detected; disallowed in ruby generation.");
		}

		//
		// All regular validations must also be checked
		//
		super.validate( state );
	}


	// Except charrange may only follow a \all range.
	private void checkAllExceptRange(Node root) {
		Vector res =  root.findNodes( "except_charset" );
		for( int i = 0;  i < res.size(); ++i ) {
			Node n = (Node) res.get(i);
			Node p = n.getParent();

			// Sanity check
			if (p.getKey() != "charset" ) {
				addError( "except_charset can only be a child-node of charset." );
				return;
			}

			// The only thing before the except node should
			// be a range node containing '\all' as value 
			if ( n == p.get(1) && "range".equals( p.get(0).getKey() ) && "\\all".equals( p.get(0).getValue() ) ) { 
				// All is well; continue
			} else {
				addError( "except_charset can only follow a range node with value '\\all' for ruby.");
			}
		}
	}
	
}

