#######################################################################
# Copyright 2012 Wim Rijnders <wrijnders@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#######################################################################
# $Id$ 
#
# For reserved words and characters till now, view the language definition.
#
#######################################################################
# Precedence, highest to lowest:
#    ( )   - overrides all
#    [],{}
#    '|'   - left to right
#######################################################################

#TEST: using language file ebnfdef.ebnf.

language EBNF {

noWS

ignore SetError      = "Err" [+\-].
token  modifier_WS   =  "skipWS" | "noWS".
       SetCase       = "matchCase" [+\-].
skip   switches      = SetError | modifier_WS | SetCase.
       o_comment     = Err+ "#" { [\all~\r\n] } [\r\n].
       c_comment     = Err- "//" { [\all~\r\n] } [\r\n].
token  comment       = o_comment | c_comment.
ignore WS            = { comment | [ \t\n\r] }.

//Character definitions
overridechar  = [\)\-\~\\\]].               
# except clause on statement level not handled yet.
# except part in following range is actually overridechar
# ORIGINAL:
# token any     = [\all]~overridechar.
token any     = [\all~\)\-\~\\\]].               
dec           = [0123456789].
ExtChar       = [rnt] | overridechar | (dec dec dec) .
anychar       = any | ( "\\" ExtChar). 

# Definitions EBNF extensions 
csallchars    = "\\all".
token range       = csallchars | ( anychar  ( "-"  anychar )?  ).

except_charset= '~' range+.
charset       = noWS '[' {  range+ | except_charset }  ']'.
                            

litchar       = [\all~'"\r\n\\] 
                | ( '\\' ['"\\trn] ).     

token LiteralBlock  = litchar+.      

# literal_symbol-s are meant for the string which are part of the grammar.
# They usually don't show up in the final parse result.
# The exception (till now) is the parser itself - it should be able to handle
# the literal_symbol-s.
#
# Under normal circumstances, following should have line modifier 'ignore'.
token literal_symbol = '\'' LiteralBlock '\''.

# Literals are strings which contain information relevant to output, such as
# parts of labels.
token literal        = '\"' LiteralBlock '\"'.

token label   = [_a-zA-Z] [_a-zA-Z0-9]*.

skipWS

//Basic WEBNF stuff
skip basicstatement = charset | literal| literal_symbol | label.
group          = statements.
repeat         = statements.

token postfix     = [+*?].

not = "!".

ExceptStatement= statement.
statement      =
		not?
		( '{' repeat '}' ) |
		(
			( basicstatement  | ( '(' group ')' ) ) 
			noWS ( postfix | ('~' skipWS ExceptStatement) )?
		).

alternative   = statement  ( '|'  statement)*.
statements       = (switches* alternative)+.

skip modifier_value  = 'entry' | 'ignore' | 'token' | 'skip' | 'raise'.
rule_modifier = modifier_value+. 
rule           = rule_modifier? label Err- '=' Err+ statements '.' .

#
#The actual language definition
#

token package_name = noWS ( label "." )* .

skip languageblock  = 'language' package_name? noWS label skipWS '{' 
		{ switches | State | action | rule  | native_code } 
	'}'. 

usingfile      = noWS [a-zA-Z0-9_]+ ( [.] { [a-zA-Z0-9_] } )?.
languagefile   = Err- "using"  "language" "file" usingfile ".".
includefile    = "using"  "include" "file" usingfile ".".

#Entry point
entry language = {languagefile|includefile}  languageblock {languagefile}.

#
#Action blocks:
#
#
noWS
#Note explicit removal of '0' in override chars - to catch any hex or oct
blocklitchar   = [\all~"\r\n\\] | ( "\\" [\all~0] ).      
blockstring    =  "\"" { blocklitchar } "\"".

#Order important in following
ignore block_comment = o_comment.
blockchar      = c_comment | block_comment | blockstring | [\all~{}$].  
token code_block     = { ( "{" code_block "}" ) | blockchar }.
skipWS

ignore pre_indicator = "pre:". 
ignore post_indicator = "post:". 
#token 
pre_block  = pre_indicator  '{' noWS code_block '}'.
#token 
post_block = '{' noWS code_block '}'.

action    = 'action' label  (pre_block ( post_indicator post_block )? ) | post_block.


#
# Native code block
#
token native_code = 'code' '{' noWS code_block '}'.


#
# State 
#

# Definitions state extended, to allow for proper definition of constructor
token number   = Err- noWS ( '+' | '-' )? dec+.
token type_state = "int" | "charset" | "bool".
token member_state = label.
oldbool         = "TRUE" | "FALSE".
token param_init = number | oldbool | "true" | "false".
token ctor_init      = '(' param_init ')'.
statevar       = type_state member_state ( ('=' param_init ) | ctor_init  )?.
stateblock     = { statevar ';' }.
skip State     = 'state'  '{' stateblock '}' . 

#
# End Language Definition.
#

}

#Following doesn't work any more!!!
#using language file insertmain.txt.



