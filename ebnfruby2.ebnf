#######################################################################
# $Id: ebnf.ebnf 42 2008-11-03 15:41:51Z wri $ 
#
# For reserved words and characters till now, view the language definition.
#
#######################################################################
# Precedence, highest to lowest:
#    ( )   - overrides all
#    [],{}
#    '|'   - left to right
#######################################################################
# TODO: Enable following constucts again
#
# using include file insertmain.txt.
# using language file ebnfdef.ebnf.
#######################################################################

language EBNFruby {

noWS

token  modifier_WS   = "skipWS" | "noWS".
skip   switches      = modifier_WS.
token  comment       = /#[^\r\n]*[\r\n]/.
ignore WS            = { comment | /[ \t\n\r]/ }.

#
# Regexp - are copied straight to ruby, so the
#          ruby syntax should be valid.
#

# Note: Order important in following! The '\\/' MUST come first
token regexp  = /\/(\\\/|[^\/])+\//.
# End Regexp
                            

litchar       = /[^'"\r\n\\]/ | /\\['"\\trn]/.     

token LiteralBlock  = litchar+.      

# literal_symbol-s are meant for the string which are part of the grammar.
# They usually don't show up in the final parse result.
# The exception (till now) is the parser itself - it should be able to handle
# the literal_symbol-s.
#
# Under normal circumstances, following should have line modifier 'ignore'.
token literal_symbol = '\'' LiteralBlock '\''.

# Literals are strings which contain information relevant to output, such as
# parts of labels.
token literal        = '\"' LiteralBlock '\"'.

token label   = /[_a-zA-Z][_a-zA-Z0-9]*/.

skipWS

# Basic EBNF stuff
skip basicstatement = regexp | literal| literal_symbol | label.
group          = statements.
repeat         = statements.

token postfix     = /[+*?]/.

ExceptStatement= statement.
statement      = 
		( '{' repeat '}' ) |
		(
			( basicstatement  | ( '(' group ')' ) ) 
			noWS ( postfix | ('~' skipWS ExceptStatement) )?
		).

alternative   = statement  ( '|'  statement)*.
statements       = (switches* alternative)+.

rule_modifier  = 'entry' | 'ignore' | 'token' | 'skip'.
rule           = rule_modifier? label '=' statements '.' .

#
#The actual language definition
#

skip languageblock  = 'language' label '{' 
		{ switches | rule } 
	'}'. 

#Entry point
entry language = languageblock.

}

#
# End Language Definition.
#

